name: CI/CD using Terraform
on:
  push:
    branches:
      - Complete-CI/CD-with-Terraform-AWS
  workflow_dispatch:
env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_TF_STATE_BUCKET_NAME: ${{secrets.AWS_TF_STATE_BUCKET_NAME}}
  AWS_SSH_KEY_PRIVATE: ${{secrets.AWS_SSH_KEY_PRIVATE}}
  AWS_SSH_KEY_PUBLIC: ${{secrets.AWS_SSH_KEY_PUBLIC}}
  AWS_REGION: us-east-1
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{steps.set-ip.outputs.instance_public_ip}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME"
          -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=$AWS_SSH_KEY_PUBLIC" \
          -var="private_key=$AWS_SSH_KEY_PRIVATE" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output name=intance_public_ip::$(terraform output instance_public_ip)"
  deploy-app:
   runs-on: ubuntu-latest
   needs: deploy-infra
   steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set IP env variable
      run: echo SERVER_PUBLIC_IP=${{needs.deploy-infra.outputs.SERVER_PUBLIC_IP}} >> $GITHUB_ENV
    - name: Login to AWS ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, push docker image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry}}
        REPOSITORY: example-node-app
        IMAGE_TAG: ${{ github.sha }}
        AWS_DEFAULT_REGION: us-east-1
      run: |-
        docker build -t $REGISTRY/REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/REPOSITORY:$IMAGE_TAG
    - name: Deploy docker image to EC2
      env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry}}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
      uses: appleboy/ssh=action@master
      with:
          host: ${{env.SERVER_PUBLIC_IP}}
          usename: ubuntu
          key: ${{ env.AWS_SSH_KEY_PRIVATE }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region us-east-1);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/REPOSITORY:$IMAGE_TAG